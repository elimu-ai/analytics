package ai.elimu.analytics.task

import ai.elimu.analytics.BaseApplication
import ai.elimu.analytics.BuildConfig
import ai.elimu.analytics.enum.EventType
import ai.elimu.analytics.enum.toServiceClass
import ai.elimu.analytics.rest.LetterSoundAssessmentEventService
import ai.elimu.analytics.rest.LetterSoundLearningEventService
import ai.elimu.analytics.rest.NumberAssessmentEventService
import ai.elimu.analytics.rest.NumberLearningEventService
import ai.elimu.analytics.rest.WordLearningEventService
import ai.elimu.analytics.util.SharedPreferencesHelper
import ai.elimu.analytics.util.VersionHelper.extractVersionCode
import android.content.Context
import androidx.work.Worker
import androidx.work.WorkerParameters
import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import timber.log.Timber
import java.io.File
import java.io.IOException
import java.util.Arrays

/**
 * Uploads CSV files previously generated by the [ExportEventsToCsvWorker]
 */
class UploadEventsWorker(context: Context, workerParams: WorkerParameters) :
    Worker(context, workerParams) {
    override fun doWork(): Result {
        Timber.i("doWork")

        uploadLetterSoundLearningEvents()
        uploadLetterSoundAssessmentEvents()

        uploadWordLearningEvents()
        uploadWordAssessmentEvents()

        uploadNumberLearningEvents()
        uploadNumberAssessmentEvents()

        uploadLearningEvents(EventType.STORY_BOOK_LEARNING)

        uploadLearningEvents(EventType.VIDEO_LEARNING)
        
        return Result.success()
    }

    private fun uploadLearningEvents(eventType: EventType) {
        Timber.i("uploadLearningEvents: $eventType")

        // Upload CSV files to the server
        // Example format:
        //   files/lang-HIN/letter-assessment-events/7161a85a0e4751cd_3003002_letter-assessment-events_2025-06-07.csv
        val filesDir = applicationContext.filesDir
        val language = SharedPreferencesHelper.getLanguage(applicationContext)
        Timber.i("language: ${language}")
        for (file in filesDir.listFiles() ?: emptyArray()) {
            Timber.i("file.name: ${file.name}")
            if (file.name.startsWith("lang-${language}")) {
                val eventsDir = File(file, eventType.type)
                Timber.i("Uploading CSV files from ${eventsDir}")
                val files = eventsDir.listFiles()
                if (files != null) {
                    Timber.i("files.length: %s", files.size)
                    Arrays.sort(files)
                    for (i in files.indices) {
                        val file = files[i]
                        Timber.i("file.getAbsoluteFile(): %s", file.absoluteFile)
                        Timber.i("file.getName(): %s", file.name)
                        val logFileVersionCode = file.name.extractVersionCode()
                        if (logFileVersionCode != BuildConfig.VERSION_CODE) continue

                        val baseApplication = applicationContext as BaseApplication
                        val retrofit = baseApplication.retrofit
                        val uploadService = retrofit.create(eventType.toServiceClass())
                        val requestBody =
                            RequestBody.create(MediaType.parse("multipart/form-data"), file)
                        val part = MultipartBody.Part.createFormData("file", file.name, requestBody)
                        val call = uploadService.uploadCsvFile(part)

                        Timber.i("call.request(): %s", call.request())
                        try {
                            val response = call.execute()
                            Timber.i("response: $response")
                            Timber.i("response.isSuccessful(): %s", response.isSuccessful)
                            if (response.isSuccessful) {
                                val bodyString = response.body()?.string()
                                Timber.i("bodyString: $bodyString")
                            } else {
                                val errorBodyString = response.errorBody()?.string()
                                Timber.e("errorBodyString: $errorBodyString")
                                // TODO: Handle error
                            }
                        } catch (e: IOException) {
                            Timber.e(e)
                        }
                    }
                }
            }
        }
    }

    // Upload CSV files generated by the current version of the app, e.g:
    //   lang-THA/letter-sound-learning-events/5b7c682a12ecbe2e_4001000_letter-sound-learning-events_2025-07-27.csv
    //   lang-THA/letter-sound-learning-events/5b7c682a12ecbe2e_4001000_letter-sound-learning-events_2025-07-27.csv
    private fun uploadLetterSoundLearningEvents() {
        Timber.i("uploadLetterSoundLearningEvents")

        val languageDir = File(applicationContext.filesDir, "lang-${SharedPreferencesHelper.getLanguage(applicationContext)}")
        val eventsDir = File(languageDir, "letter-sound-learning-events")
        Timber.i("eventsDir.exists(): ${eventsDir.exists()}")
        for (csvFile in eventsDir.listFiles() ?: emptyArray()) {
            Timber.i("csvFile: ${csvFile}")

            // Skip files that were not generated by the current app version, e.g. "_4001000_"
            if (!csvFile.name.contains("_${BuildConfig.VERSION_CODE}_")) {
                continue
            }

            // Prepare upload service
            val baseApplication = applicationContext as BaseApplication
            val retrofit = baseApplication.retrofit
            val uploadService = retrofit.create(LetterSoundLearningEventService::class.java)

            // Prepare upload request
            val requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), csvFile)
            val part = MultipartBody.Part.createFormData("file", csvFile.name, requestBody)
            val call = uploadService.uploadCsvFile(part)
            Timber.i("call.request(): ${call.request()}")

            // Upload file
            val response = call.execute()
            Timber.i("response: $response")
            if (response.isSuccessful) {
                val bodyString = response.body()?.string()
                Timber.i("bodyString: $bodyString")
            } else {
                val errorBodyString = response.errorBody()?.string()
                Timber.e("errorBodyString: $errorBodyString")
            }
        }

        Timber.i("uploadLetterSoundLearningEvents complete!")
    }

    // Upload CSV files generated by the current version of the app, e.g:
    //   lang-THA/letter-sound-assessment-events/5b7c682a12ecbe2e_4001000_letter-sound-assessment-events_2025-07-27.csv
    //   lang-THA/letter-sound-assessment-events/5b7c682a12ecbe2e_4001000_letter-sound-assessment-events_2025-07-27.csv
    private fun uploadLetterSoundAssessmentEvents() {
        Timber.i("uploadLetterSoundAssessmentEvents")

        val languageDir = File(applicationContext.filesDir, "lang-${SharedPreferencesHelper.getLanguage(applicationContext)}")
        val eventsDir = File(languageDir, "letter-sound-assessment-events")
        Timber.i("eventsDir.exists(): ${eventsDir.exists()}")
        for (csvFile in eventsDir.listFiles() ?: emptyArray()) {
            Timber.i("csvFile: ${csvFile}")

            // Skip files that were not generated by the current app version, e.g. "_4001000_"
            if (!csvFile.name.contains("_${BuildConfig.VERSION_CODE}_")) {
                continue
            }

            // Prepare upload service
            val baseApplication = applicationContext as BaseApplication
            val retrofit = baseApplication.retrofit
            val uploadService = retrofit.create(LetterSoundAssessmentEventService::class.java)

            // Prepare upload request
            val requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), csvFile)
            val part = MultipartBody.Part.createFormData("file", csvFile.name, requestBody)
            val call = uploadService.uploadCsvFile(part)
            Timber.i("call.request(): ${call.request()}")

            // Upload file
            val response = call.execute()
            Timber.i("response: $response")
            if (response.isSuccessful) {
                val bodyString = response.body()?.string()
                Timber.i("bodyString: $bodyString")
            } else {
                val errorBodyString = response.errorBody()?.string()
                Timber.e("errorBodyString: $errorBodyString")
            }
        }

        Timber.i("uploadLetterSoundAssessmentEvents complete!")
    }


    // Upload CSV files generated by the current version of the app, e.g:
    //   lang-THA/word-learning-events/5b7c682a12ecbe2e_4001000_word-learning-events_2025-07-27.csv
    //   lang-THA/word-learning-events/5b7c682a12ecbe2e_4001000_word-learning-events_2025-07-27.csv
    private fun uploadWordLearningEvents() {
        Timber.i("uploadWordLearningEvents")

        val languageDir = File(applicationContext.filesDir, "lang-${SharedPreferencesHelper.getLanguage(applicationContext)}")
        val eventsDir = File(languageDir, "word-learning-events")
        Timber.i("eventsDir.exists(): ${eventsDir.exists()}")
        for (csvFile in eventsDir.listFiles() ?: emptyArray()) {
            Timber.i("csvFile: ${csvFile}")

            // Skip files that were not generated by the current app version, e.g. "_4001000_"
            if (!csvFile.name.contains("_${BuildConfig.VERSION_CODE}_")) {
                continue
            }

            // Prepare upload service
            val baseApplication = applicationContext as BaseApplication
            val retrofit = baseApplication.retrofit
            val uploadService = retrofit.create(WordLearningEventService::class.java)

            // Prepare upload request
            val requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), csvFile)
            val part = MultipartBody.Part.createFormData("file", csvFile.name, requestBody)
            val call = uploadService.uploadCsvFile(part)
            Timber.i("call.request(): ${call.request()}")

            // Upload file
            val response = call.execute()
            Timber.i("response: $response")
            if (response.isSuccessful) {
                val bodyString = response.body()?.string()
                Timber.i("bodyString: $bodyString")
            } else {
                val errorBodyString = response.errorBody()?.string()
                Timber.e("errorBodyString: $errorBodyString")
            }
        }

        Timber.i("uploadWordLearningEvents complete!")
    }

    // Upload CSV files generated by the current version of the app, e.g:
    //   lang-THA/word-assessment-events/5b7c682a12ecbe2e_4001000_word-assessment-events_2025-07-27.csv
    //   lang-THA/word-assessment-events/5b7c682a12ecbe2e_4001000_word-assessment-events_2025-07-27.csv
    private fun uploadWordAssessmentEvents() {
        Timber.i("uploadWordAssessmentEvents")

        val languageDir = File(applicationContext.filesDir, "lang-${SharedPreferencesHelper.getLanguage(applicationContext)}")
        val eventsDir = File(languageDir, "word-assessment-events")
        Timber.i("eventsDir.exists(): ${eventsDir.exists()}")
        for (csvFile in eventsDir.listFiles() ?: emptyArray()) {
            Timber.i("csvFile: ${csvFile}")

            // Skip files that were not generated by the current app version, e.g. "_4001000_"
            if (!csvFile.name.contains("_${BuildConfig.VERSION_CODE}_")) {
                continue
            }

            // Prepare upload service
            val baseApplication = applicationContext as BaseApplication
            val retrofit = baseApplication.retrofit
            val uploadService = retrofit.create(WordAssessmentEventService::class.java)

            // Prepare upload request
            val requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), csvFile)
            val part = MultipartBody.Part.createFormData("file", csvFile.name, requestBody)
            val call = uploadService.uploadCsvFile(part)
            Timber.i("call.request(): ${call.request()}")

            // Upload file
            val response = call.execute()
            Timber.i("response: $response")
            if (response.isSuccessful) {
                val bodyString = response.body()?.string()
                Timber.i("bodyString: $bodyString")
            } else {
                val errorBodyString = response.errorBody()?.string()
                Timber.e("errorBodyString: $errorBodyString")
            }
        }

        Timber.i("uploadWordAssessmentEvents complete!")
    }


    // Upload CSV files generated by the current version of the app, e.g:
    //   lang-THA/number-learning-events/5b7c682a12ecbe2e_4000021_number-learning-events_2025-06-29.csv
    //   lang-THA/number-learning-events/5b7c682a12ecbe2e_4000021_number-learning-events_2025-06-30.csv
    private fun uploadNumberLearningEvents() {
        Timber.i("uploadNumberLearningEvents")

        val languageDir = File(applicationContext.filesDir, "lang-${SharedPreferencesHelper.getLanguage(applicationContext)}")
        val eventsDir = File(languageDir, "number-learning-events")
        Timber.i("eventsDir.exists(): ${eventsDir.exists()}")
        for (csvFile in eventsDir.listFiles() ?: emptyArray()) {
            Timber.i("csvFile: ${csvFile}")

            // Skip files that were not generated by the current app version, e.g. "_4000021_"
            if (!csvFile.name.contains("_${BuildConfig.VERSION_CODE}_")) {
                continue
            }

            // Prepare upload service
            val baseApplication = applicationContext as BaseApplication
            val retrofit = baseApplication.retrofit
            val uploadService = retrofit.create(NumberLearningEventService::class.java)

            // Prepare upload request
            val requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), csvFile)
            val part = MultipartBody.Part.createFormData("file", csvFile.name, requestBody)
            val call = uploadService.uploadCsvFile(part)
            Timber.i("call.request(): ${call.request()}")

            // Upload file
            val response = call.execute()
            Timber.i("response: $response")
            if (response.isSuccessful) {
                val bodyString = response.body()?.string()
                Timber.i("bodyString: $bodyString")
            } else {
                val errorBodyString = response.errorBody()?.string()
                Timber.e("errorBodyString: $errorBodyString")
            }
        }

        Timber.i("uploadNumberLearningEvents complete!")
    }
    
    // Upload CSV files generated by the current version of the app, e.g:
    //   lang-THA/number-assessment-events/5b7c682a12ecbe2e_4000021_number-assessment-events_2025-06-29.csv
    //   lang-THA/number-assessment-events/5b7c682a12ecbe2e_4000021_number-assessment-events_2025-06-30.csv
    private fun uploadNumberAssessmentEvents() {
        Timber.i("uploadNumberAssessmentEvents")

        val languageDir = File(applicationContext.filesDir, "lang-${SharedPreferencesHelper.getLanguage(applicationContext)}")
        val eventsDir = File(languageDir, "number-assessment-events")
        Timber.i("eventsDir.exists(): ${eventsDir.exists()}")
        for (csvFile in eventsDir.listFiles() ?: emptyArray()) {
            Timber.i("csvFile: ${csvFile}")

            // Skip files that were not generated by the current app version, e.g. "_4000021_"
            if (!csvFile.name.contains("_${BuildConfig.VERSION_CODE}_")) {
                continue
            }

            // Prepare upload service
            val baseApplication = applicationContext as BaseApplication
            val retrofit = baseApplication.retrofit
            val uploadService = retrofit.create(NumberAssessmentEventService::class.java)

            // Prepare upload request
            val requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), csvFile)
            val part = MultipartBody.Part.createFormData("file", csvFile.name, requestBody)
            val call = uploadService.uploadCsvFile(part)
            Timber.i("call.request(): ${call.request()}")

            // Upload file
            val response = call.execute()
            Timber.i("response: $response")
            if (response.isSuccessful) {
                val bodyString = response.body()?.string()
                Timber.i("bodyString: $bodyString")
            } else {
                val errorBodyString = response.errorBody()?.string()
                Timber.e("errorBodyString: $errorBodyString")
            }
        }

        Timber.i("uploadNumberAssessmentEvents complete!")
    }
}
