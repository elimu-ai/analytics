package ai.elimu.analytics.task

import ai.elimu.analytics.BaseApplication
import ai.elimu.analytics.entity.LearningEventUploadType
import ai.elimu.analytics.entity.toServiceClass
import ai.elimu.analytics.util.DateHelper
import android.content.Context
import androidx.work.Worker
import androidx.work.WorkerParameters
import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import timber.log.Timber
import java.io.IOException
import java.time.LocalDate
import java.util.Arrays

/**
 * Uploads CSV files previously generated by the [ExportEventsToCsvWorker]
 */
class UploadEventsWorker(context: Context, workerParams: WorkerParameters) :
    Worker(context, workerParams) {
    override fun doWork(): Result {
        Timber.i("doWork")

        uploadLearningEvents(eventType = LearningEventUploadType.LETTER_ASSESSMENT)
        uploadLearningEvents(eventType = LearningEventUploadType.LETTER_SOUND_ASSESSMENT)
        uploadLearningEvents(eventType = LearningEventUploadType.LETTER_SOUND_LEARNING)
        uploadLearningEvents(eventType = LearningEventUploadType.WORD_LEARNING)
        uploadLearningEvents(eventType = LearningEventUploadType.WORD_ASSESSMENT)
        uploadLearningEvents(eventType = LearningEventUploadType.STORY_BOOK_LEARNING)

        return Result.success()
    }

    private fun uploadLearningEvents(eventType: LearningEventUploadType) {
        Timber.i("uploadLearningEvents: $eventType")

        // Upload CSV files to the server
        // Example format:
        //   files/version-code-3001012/letter-assessment-events/7161a85a0e4751cd_3001012_letter-assessment-events_2020-03-21.csv
        val filesDir = applicationContext.filesDir
        for (learningEventDir in filesDir.listFiles() ?: emptyArray()) {
            if (learningEventDir.name.startsWith("version-code-")) continue
            if (learningEventDir.name != eventType.type) continue

            Timber.tag("tuancoltech").v("Inside learningEventDir: ${learningEventDir.name}. Type: ${eventType.type}")


            val files = learningEventDir.listFiles()
            if (files != null) {
                Timber.i("files.length: %s", files.size)
                Arrays.sort(files)
                for (i in files.indices) {
                    val file = files[i]
                    Timber.i("file.getAbsoluteFile(): %s %s", file.absoluteFile, "\nlearningEventDir: " + learningEventDir.name)
                    Timber.i("file.getName(): %s", file.name)
                    Timber.tag("tuancoltech").i("Uploading file: ${file.absoluteFile}")

                    val baseApplication = applicationContext as BaseApplication
                    val retrofit = baseApplication.retrofit
                    val uploadService = retrofit.create(eventType.toServiceClass())
                    val requestBody =
                        RequestBody.create(MediaType.parse("multipart/form-data"), file)
                    val part = MultipartBody.Part.createFormData("file", file.name, requestBody)
                    val call = uploadService.uploadCsvFile(part)

                    Timber.i("call.request(): %s", call.request())
                    try {
                        val response = call.execute()
                        Timber.i("response: $response")
                        Timber.i("response.isSuccessful(): %s", response.isSuccessful)
                        if (response.isSuccessful) {
                            val bodyString = response.body()?.string()
                            Timber.i("bodyString: $bodyString")
                        } else {
                            val errorBodyString = response.errorBody()?.string()
                            Timber.e("errorBodyString: $errorBodyString")
                            // TODO: Handle error
                        }
                    } catch (e: IOException) {
                        Timber.e(e)
                    }

                    // Delete log files which are older than 7 days in the past
                    // to save device storage
                    if (DateHelper.isDateOlderThanSevenDays(file.name, LocalDate.now())) {
                        try {
                            file.delete()
                            Timber.v("Deleting old log file file.getName: " + file.absoluteFile)
                        } catch (e: Exception) {
                            Timber.w(e)
                        }
                    }
                }
            }
        }
    }
}
